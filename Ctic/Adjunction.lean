import Ctic.Repre

namespace CTIC

class Adjunction [Category C] [Category D] (F : C ‚•§ D) (G : D ‚•§ C) where
  Œ∑ : ùü≠ C ‚üπ (F ‚ãô G)
  Œµ : (G ‚ãô F) ‚üπ ùü≠ D
  upper {X : C} : F.map (Œ∑ X) ‚â´ Œµ (F X) = ùüô (F X) -- top right diagonal diagram
  lower {Y : D} : Œ∑ (G Y) ‚â´ G.map (Œµ Y) = ùüô (G Y) -- bottom left diagonal diagram

namespace Adjunction

variable {C : Type u} {D : Type v}
variable [Category C] [Category D]
variable {F : C ‚•§ D} {G : D ‚•§ C} [Adjunction F G]

example {X : C} {Y : D} : Hom[F X, Y] ‚âÖ Hom[X, G Y] := by
  constructor
  case morphism =>
    simp [HomCov]
    intro f
    let f' := G.map f
    exact Œ∑.component X ‚â´ f'
  case inverse =>
    simp [HomCov]
    intro g
    let g' := F.map g
    exact g' ‚â´ Œµ.component Y
  case forward =>
    simp [Category.comp, Category.id]
    funext f
    simp
    have := (Œµ (F := F) (G := G)).naturality f
    simp [Functor.id, Functor.comp] at this
    rw [‚Üê Category.assoc]
    rw [‚Üê this]
    rw [Category.assoc]
    rw [upper]
    simp
  case backward =>
    simp [Category.comp, Category.id]
    funext f
    simp
    have := (Œ∑ (F := F) (G := G)).naturality f
    simp [Functor.id, Functor.comp] at this
    rw [this]
    rw [‚Üê Category.assoc]
    rw [lower]
    simp

end Adjunction

notation:max "Hom[" F "(" "-" ")" ", " Y "]" => F·µí·µñ ‚ãô Hom[-, Y]
notation:max "Hom[" X ", " F "(" "-" ")" "]" => F ‚ãô Hom[X, -]

open Lean in
@[app_unexpander Functor.comp]
def unexpand_Functor_comp_HomCon : PrettyPrinter.Unexpander
  | `($(_) $f·µí·µñ Hom[-, $y]) => `(Hom[$f(-), $y])
  | _ => throw ()

open Lean in
@[app_unexpander Functor.comp]
def unexpand_Functor_comp_HomCov : PrettyPrinter.Unexpander
  | `($(_) $f Hom[$x, -]) => `(Hom[$x, $f(-)])
  | _ => throw ()

open Lean in
@[app_unexpander Functor.obj]
def unexpand_Functor_comp_HomCon_obj : PrettyPrinter.Unexpander
  | `($(_) Hom[$f(-), $y] $x·µí·µñ) => `(Hom[$f $x, $y])
  | `($(_) Hom[$f(-), $y] $x) =>
    match x with
    | `({ unop := $x }) => `(Hom[$f $x, $y])
    | _ => `(Hom[$f $x·µí·µñ, $y])
  | _ => throw ()

open Lean in
@[app_unexpander Functor.obj]
def unexpand_Functor_HomCon_obj : PrettyPrinter.Unexpander
  | `($(_) Hom[-, $y] $x·µí·µñ) => `(Hom[$x, $y])
  | `($(_) Hom[-, $y] $x) =>
    match x with
    | `({ unop := $x }) => `(Hom[$x, $y])
    | _ => `(Hom[$x·µí·µñ, $y])
  | _ => throw ()

open Lean in
@[app_unexpander Functor.obj]
def unexpand_Functor_comp_HomCov_obj : PrettyPrinter.Unexpander
  | `($(_) Hom[$x, $f(-)] $y) => `(Hom[$x, $f $y])
  | _ => throw ()

open Lean in
@[app_unexpander Functor.obj]
def unexpand_Functor_HomCov_obj : PrettyPrinter.Unexpander
  | `($(_) Hom[$x, -] $y) => `(Hom[$x, $y])
  | _ => throw ()

@[simp]
theorem HomCon.comp_obj_def [Category C] [Category D] {F : C ‚•§ D} {X : C} {Y : D} :
    Hom[F(-), Y] { unop := X } = Hom[F X, Y] := by rfl

@[simp]
theorem HomCon.comp_obj_def' [Category C] [Category D] {F : C ‚•§ D} {X : C} {Y : D} :
    Hom[F(-), Y] X·µí·µñ = Hom[F X, Y] := by rfl

@[simp]
theorem Functor.op_map_def [Category C] [Category D] {F : C ‚•§ D} {X : C} {Y : C} {f : X ‚ü∂ Y} :
    F·µí·µñ.map f = F.map f := by rfl

namespace Adjunction

variable {C : Type u} {D : Type v}
variable [Category C] [Category D]
variable {F : C ‚•§ D} {G : D ‚•§ C} [Adjunction F G]

def Sharp (Y : D) : Hom[F(-), Y] ‚âÖ Hom[-, G Y] where
  morphism := by
    use fun ‚ü®X‚ü© f => Œ∑ X ‚â´ G.map f
    intro ‚ü®X‚ü© ‚ü®c‚ü©
    simp [Category.Hom]
    intro f
    funext h
    simp [Category.comp, HomCon]
    simp [Functor.comp]
    congr 1
    have := (Œ∑ (F := F) (G := G)).naturality f
    simp [Functor.id, Functor.comp] at this
    rw [this]
  inverse := by
    use fun ‚ü®X‚ü© g => F.map g ‚â´ Œµ Y
    intro ‚ü®X‚ü© ‚ü®c‚ü©
    simp [Category.Hom]
    intro f
    funext h
    simp [Category.comp, HomCon]
    simp [Functor.comp]
  forward := by
    simp [Category.comp, NatTrans.comp, Category.id, NatTrans.id]
    congr
    funext X
    obtain ‚ü®X‚ü© := X
    simp
    funext f
    simp
    have := (Œµ (F := F) (G := G)).naturality f
    simp [Functor.id, Functor.comp] at this
    rw [‚Üê Category.assoc, ‚Üê this]
    rw [Category.assoc, upper]
    rw [Category.id_comp (f := f)]
  backward := by
    simp [Category.comp, NatTrans.comp, Category.id, NatTrans.id]
    congr
    funext X
    obtain ‚ü®X‚ü© := X
    simp
    funext f
    simp
    have := (Œ∑ (F := F) (G := G)).naturality f
    simp [Functor.id, Functor.comp] at this
    rw [this]
    rw [‚Üê Category.assoc, lower]
    rw [Category.comp_id]

def Flat (X : C) : Hom[F X, -] ‚âÖ Hom[X, G(-)] where
  morphism := by
    use fun Y f => Œ∑ X ‚â´ G.map f
    intro d Y f
    simp [Category.comp, Functor.comp, HomCov]
    funext g
    simp
  inverse := by
    use fun Y g => F.map g ‚â´ Œµ Y
    intro d Y f
    simp [Category.comp, Functor.comp, HomCov]
    funext g
    simp
    rw [‚Üê Category.assoc]
    rw [‚Üê Category.assoc]
    congr 1
    have := (Œµ (F := F) (G := G)).naturality f
    simp [Functor.id, Functor.comp] at this
    rw [this]
  forward := by
    simp [Category.comp, NatTrans.comp, Category.id, NatTrans.id]
    congr
    funext Y f
    simp
    have := (Œµ (F := F) (G := G)).naturality f
    simp [Functor.id, Functor.comp] at this
    rw [‚Üê Category.assoc, ‚Üê this]
    rw [Category.assoc, upper]
    rw [Category.id_comp (f := f)]
  backward := by
    simp [Category.comp, NatTrans.comp, Category.id, NatTrans.id]
    congr
    funext Y f
    simp
    have := (Œ∑ (F := F) (G := G)).naturality f
    simp [Functor.id, Functor.comp] at this
    rw [this]
    rw [‚Üê Category.assoc, lower]
    rw [Category.comp_id]







end Adjunction
